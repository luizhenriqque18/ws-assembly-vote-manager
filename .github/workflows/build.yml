#Workflow name

name: CI/CD Pipeline

on:
  #Manually trigger workflow runs
  workflow_dispatch:
  #Trigger the workflow on push from the main branch
  push:
    branches:
      - main
jobs:
  #Test's job
  tests:
    name: Unit tests
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    #Job's steps
    steps:
        #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v2

        #Set up JDK 8
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '8'

        #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

        #Run Tests
      - name: Run Tests
        run: mvn -B test

  #Sonar's Job
  sonar:
    #Depends on test's job
    needs: tests
    name: SonarCloud analysis
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    #Job's steps
    steps:
        #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

        #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'

        #Set up SonarCloud cache
      - name: Cache SonarCloud packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

        #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

        #Analyze project with SonarCloud
      - name: Analyze with SonarCloud
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.login=$SONAR_TOKEN
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  #Build's job
  build:
    #if: ${{ false }}  # disable for now
    #Depends on sonar's job
    needs: sonar
    name: Build
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
        #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v2

        #Set up JDK 8
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '8'

        #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

        #Build the application using Maven
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml

        #Build the application using Maven
      - name: Upload JAR
        #This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
        uses: actions/upload-artifact@v2
        with:
          #Set artifact name
          name: ws-assembly-vote-manager
          #From this path
          path: target/ws-assembly-vote-manager-0.0.1-SNAPSHOT.jar

      #Build the application using Dockerfile
      - name: Build and push image to Dockerhub
        uses: docker/build-push-action@v1.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ secrets.DOCKER_USERNAME }}/ws-assembly-vote-manager
          tags: ${{ github.sha }}, latest

  #Deploy's job
  deploy:
    #Depends on build's job
    #if: ${{ false }}  # disable for now
    needs: build
    name: Deploy
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
        #Download the artifact which was uploaded in the build's job
      - name: Download JAR
        uses: actions/download-artifact@v2
        with:
          name: ws-assembly-vote-manager

        #Deploy the artifact (JAR) into AWS Beanstalk
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v13
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          use_existing_version_if_available: false
          application_name: ${{ vars.AWS_EB_APPLICATION_NAME }}
          environment_name: ${{ vars.AWS_EB_ENVIRONMENT_NAME }}
          version_label: ${{github.SHA}}
          region: ${{ vars.AWS_REGION }}
          deployment_package: ws-assembly-vote-manager-0.0.1-SNAPSHOT.jar
